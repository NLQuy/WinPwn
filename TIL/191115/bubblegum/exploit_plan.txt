Exploit Plan:
Option 6 (range setting) where no bounds check leads to oob in custom heap
=> arbitrary RW in custom heap section
Option 5 (index setting) where index is only checked by bounds
=> makes arbitrary RW in custom heap section into completely arbitrary RW

Example:
1
d20400000802ffffffffffffffffffffffffffffffff
1
d30400000101ff
6
1234
0
-1
257
7
16843009 => crashes here, since address 0x01010101 is not accessible

(not exactly the same as exploit.py implementation, but generally follows the same steps)
1. create CArr #0
2. create CArr #1
3. use opt6 oob to overwrite CArr #1 elem count
4. print CArr #1 => leak custom heap base
5. use opt6 oob to overwrite CArr #1 data ptr to (custom heap base - 0x2)
   => causes code leak to position @ (CArr #1)->data->bound_hi lowest byte
6. use opt6 to write some keyword as much as (code base) >> 16
7. print the written string => leak code base
8. use opt5, opt6 to overwrite TopLevelExceptionHandler with custom heap section
9. trigger division by 0 (again by opt6), arbitrary code execution!

PS. If the custom heap area was non-executable, we could replace steps 8~9 with the following:
8. read pointers initialized at _cfltcvt_init and encoded with EncodePointer at _initp_misc_cfltcvt_tab
   => check 0~0x1f lower 5 bits, recover process cookie
9. overwrite encoded function pointers called at _Init_atexit::~_Init_atexit & set its counter appropriately
10. properly terminate programm to trigger ~_Init_atexit, or overwrite TopLevelExceptionHandler and trigger exception
    => 10 consecutive arbitrary calls, do anything needed! ROP stager maybe?